{
  "address": "0xd0190Eb9c8a7c24be255BD9445dd07c500d4f6b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_actionId",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserNotVerified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserVerified",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "identityCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfs_uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "detail",
          "type": "string"
        }
      ],
      "name": "transactionSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getCurrGroupId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWorldIDAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementGroupIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registeredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfs_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "detail",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "storeSignal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "submitNonVerifiedUserTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfs_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "detail",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "buyer_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "storeSignal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "submitVerifiedTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyForTaxDeclaration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4988fcf0443202242abd422fbe3607f5139bf7989fb355557d723d7ad49436d4",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x41C929802517f5CE1eD0d6684B579F6E44d277b5",
    "contractAddress": "0xd0190Eb9c8a7c24be255BD9445dd07c500d4f6b3",
    "transactionIndex": 0,
    "gasUsed": "1107927",
    "logsBloom": "0x
    "blockHash": "0xaf6a90f0ae09b249084518a864178be35ffab2e80a9a2b107e0c2882110f217e",
    "transactionHash": "0x4988fcf0443202242abd422fbe3607f5139bf7989fb355557d723d7ad49436d4",
    "logs": [],
    "blockNumber": 36444,
    "cumulativeGasUsed": "1107927",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x953f507651C49440Ad3DFC8Feee66B11171862dF",
    "wid_test_1234"
  ],
  "numDeployments": 19,
  "solcInputHash": "e3623602a69f8cd6dd67a89355e61ebe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_actionId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotVerified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserVerified\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfs_uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"}],\"name\":\"transactionSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCurrGroupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldIDAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementGroupIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"storeSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"submitNonVerifiedUserTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyer_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storeSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"submitVerifiedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyForTaxDeclaration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_actionId\":\"The action ID for your application\",\"_worldId\":\"The WorldID instance that will verify the proofs\"}},\"submitNonVerifiedUserTx(string,string,uint256,uint256,uint256,uint256[8])\":{\"details\":\"if store is verified\"},\"submitVerifiedTx(string,string,address,uint256,uint256,uint256,uint256[8])\":{\"details\":\"iff user and store are both verified\"}},\"stateVariables\":{\"actionId\":{\"details\":\"The application's action ID\"},\"groupId\":{\"details\":\"The WorldID group ID (1)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to prevent double-signaling\"},\"worldId\":{\"details\":\"The WorldID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JomTx.sol\":\"JomTx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/JomTx.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport { ByteHasher } from './helpers/ByteHasher.sol';\\nimport { IWorldID } from './interfaces/IWorldID.sol';\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/*\\n//   @dev JomTx contract, implemented for ETH SF hackathon\\n//   @title JomTx\\n//   @author Carlos Ramos\\n//   @note we infer that everyStore using this contract has already been verified.\\n*/\\ncontract JomTx {\\n    using ByteHasher for bytes;\\n    using Counters for Counters.Counter;\\n\\n    /// @notice Thrown when attempting to reuse a nullifier\\n    error InvalidNullifier();\\n    error UserVerified();\\n    error UserNotVerified();\\n\\n    event transactionSubmitted(uint256 identityCommitment, string ipfs_uri, address buyer_addr, string detail);\\n\\n    /// @dev The WorldID instance that will be used for verifying proofs\\n    IWorldID internal immutable worldId;\\n\\n    /// @dev The application's action ID\\n    uint256 internal immutable actionId;\\n\\n    /// @dev The WorldID group ID (1)\\n    uint256 internal immutable groupId = 1;\\n\\n    /// @dev Whether a nullifier hash has been used already. Used to prevent double-signaling\\n    mapping(uint256 => bool) internal nullifierHashes;\\n    mapping(address => bool) public registeredUser;\\n\\n    // PROTOCOL VARIABLES //\\n    mapping(uint256 => string[]) internal storeTransactions;\\n    mapping(address => string[]) internal userTransactions;\\n\\n    Counters.Counter private groupIds;\\n\\n    /// @param _worldId The WorldID instance that will verify the proofs\\n    /// @param _actionId The action ID for your application\\n    constructor(IWorldID _worldId, string memory _actionId) {\\n        worldId = _worldId;\\n        actionId = abi.encodePacked(_actionId).hashToField();\\n    }\\n\\n    /// @dev if store is verified\\n    function submitNonVerifiedUserTx (\\n        string memory ipfs_uri,\\n        string memory detail,\\n        uint256 storeSignal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof \\n        ) external {\\n\\n        storeTransactions[nullifierHash].push(ipfs_uri);\\n\\n        worldId.verifyProof(\\n            root,\\n            storeSignal,\\n            abi.encodePacked(storeSignal).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n\\n        emit transactionSubmitted(nullifierHash, ipfs_uri, address(0),detail);\\n    }\\n\\n    /// @dev iff user and store are both verified\\n    function submitVerifiedTx (\\n        string memory ipfs_uri,\\n        string memory detail,\\n        address buyer_addr,\\n        uint256 storeSignal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n        ) external {\\n\\n        require(registeredUser[buyer_addr], \\\"User hasnt been verified\\\");\\n\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(storeSignal).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n\\n        storeTransactions[nullifierHash].push(ipfs_uri);\\n        userTransactions[buyer_addr].push(ipfs_uri);\\n\\n        emit transactionSubmitted(nullifierHash, ipfs_uri, buyer_addr,detail);\\n    }\\n\\n    function verifyUser (\\n        address callerAddr,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) external {\\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n        if (registeredUser[callerAddr]) revert UserVerified();\\n\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(callerAddr).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n\\n        nullifierHashes[nullifierHash] = true;\\n        registeredUser[callerAddr] = true;\\n    }\\n\\n    function verifyForTaxDeclaration(\\n        address callerAddr, \\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) external {\\n        if (registeredUser[msg.sender]) revert UserNotVerified();\\n\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(callerAddr).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n    }\\n\\n    function getCurrGroupId() external view returns(uint256) {\\n        return groupIds.current();\\n    }\\n\\n    function incrementGroupIds() external {\\n        groupIds.increment();\\n    }\\n\\n\\n    function getWorldIDAddr () external view returns(address){\\n        return address(worldId);\\n    }\\n}\",\"keccak256\":\"0xf0201c3adebb53bb074ba74a6208fa02b4fdb32d1ff90826963e796a607c9122\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x225f0627ac21d07df35533f605936035d74aa0f05a632cb8d150d3af50408cd0\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x20fc12dea0b817fb8b7bc1a851082676ed2dcb844d3673d60aa5570da3e1b62e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600160c0908152503480156200001957600080fd5b50604051620017813803806200178183398181016040528101906200003f919062000308565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000aa816040516020016200008a9190620003bb565b604051602081830303815290604052620000b960201b620009b81760201c565b60a0818152505050506200043a565b6000600882604051602001620000d0919062000421565b6040516020818303038152906040528051906020012060001c901c9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001338262000106565b9050919050565b6000620001478262000126565b9050919050565b62000159816200013a565b81146200016557600080fd5b50565b60008151905062000179816200014e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d48262000189565b810181811067ffffffffffffffff82111715620001f657620001f56200019a565b5b80604052505050565b60006200020b620000f2565b9050620002198282620001c9565b919050565b600067ffffffffffffffff8211156200023c576200023b6200019a565b5b620002478262000189565b9050602081019050919050565b60005b838110156200027457808201518184015260208101905062000257565b8381111562000284576000848401525b50505050565b6000620002a16200029b846200021e565b620001ff565b905082815260208101848484011115620002c057620002bf62000184565b5b620002cd84828562000254565b509392505050565b600082601f830112620002ed57620002ec6200017f565b5b8151620002ff8482602086016200028a565b91505092915050565b60008060408385031215620003225762000321620000fc565b5b6000620003328582860162000168565b925050602083015167ffffffffffffffff81111562000356576200035562000101565b5b6200036485828601620002d5565b9150509250929050565b600081519050919050565b600081905092915050565b600062000391826200036e565b6200039d818562000379565b9350620003af81856020860162000254565b80840191505092915050565b6000620003c9828462000384565b915081905092915050565b600081519050919050565b600081905092915050565b6000620003f782620003d4565b620004038185620003df565b93506200041581856020860162000254565b80840191505092915050565b60006200042f8284620003ea565b915081905092915050565b60805160a05160c0516112d8620004a96000396000818161040801528181610594015261087501526000818161027101528181610452015281816105de01526108bf0152600081816101970152818161020a015281816103cb01528181610557015261083801526112d86000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636b5f4d881161005b5780636b5f4d881461010157806389c3c2db1461011f578063a2055b281461013b578063b4ca1b1b1461015757610088565b80630961b61a1461008d57806313aad955146100bd5780632e812c98146100db578063376a2481146100f7575b600080fd5b6100a760048036038101906100a29190610b28565b610173565b6040516100b49190610b70565b60405180910390f35b6100c5610193565b6040516100d29190610b9a565b60405180910390f35b6100f560048036038101906100f09190610d58565b6101bb565b005b6100ff610328565b005b610109610334565b6040516101169190610e2d565b60405180910390f35b61013960048036038101906101349190610e48565b610345565b005b61015560048036038101906101509190610eb0565b6104c9565b005b610171600480360381019061016c9190610e48565b61075b565b005b60016020528060005260406000206000915054906101000a900460ff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6002600083815260200190815260200160002086908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610207929190610a13565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3848661026e8860405160200161025a9190610fac565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b81526004016102b296959493929190610fd8565b60006040518083038186803b1580156102ca57600080fd5b505afa1580156102de573d6000803e3d6000fd5b505050507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc746828760008860405161031894939291906110c2565b60405180910390a1505050505050565b61033260046109ef565b565b60006103406004610a05565b905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156103c9576040517f7d93d32b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061044f8860405160200161043b919061115d565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161049396959493929190610fd8565b60006040518083038186803b1580156104ab57600080fd5b505afa1580156104bf573d6000803e3d6000fd5b5050505050505050565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054c906111c4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006105db886040516020016105c79190610fac565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161061f96959493929190610fd8565b60006040518083038186803b15801561063757600080fd5b505afa15801561064b573d6000803e3d6000fd5b50505050600260008381526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061069b929190610a13565b50600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610714929190610a13565b507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc7468288878960405161074a94939291906110c2565b60405180910390a150505050505050565b60008083815260200190815260200160002060009054906101000a900460ff16156107b2576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610836576040517f6aa7da1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006108bc886040516020016108a8919061115d565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161090096959493929190610fd8565b60006040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b50505050600160008084815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60006008826040516020016109cd919061122b565b6040516020818303038152906040528051906020012060001c901c9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b828054610a1f90611271565b90600052602060002090601f016020900481019282610a415760008555610a88565b82601f10610a5a57805160ff1916838001178555610a88565b82800160010185558215610a88579182015b82811115610a87578251825591602001919060010190610a6c565b5b509050610a959190610a99565b5090565b5b80821115610ab2576000816000905550600101610a9a565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af582610aca565b9050919050565b610b0581610aea565b8114610b1057600080fd5b50565b600081359050610b2281610afc565b92915050565b600060208284031215610b3e57610b3d610ac0565b5b6000610b4c84828501610b13565b91505092915050565b60008115159050919050565b610b6a81610b55565b82525050565b6000602082019050610b856000830184610b61565b92915050565b610b9481610aea565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c0882610bbf565b810181811067ffffffffffffffff82111715610c2757610c26610bd0565b5b80604052505050565b6000610c3a610ab6565b9050610c468282610bff565b919050565b600067ffffffffffffffff821115610c6657610c65610bd0565b5b610c6f82610bbf565b9050602081019050919050565b82818337600083830152505050565b6000610c9e610c9984610c4b565b610c30565b905082815260208101848484011115610cba57610cb9610bba565b5b610cc5848285610c7c565b509392505050565b600082601f830112610ce257610ce1610bb5565b5b8135610cf2848260208601610c8b565b91505092915050565b6000819050919050565b610d0e81610cfb565b8114610d1957600080fd5b50565b600081359050610d2b81610d05565b92915050565b600080fd5b600081905082602060080282011115610d5257610d51610d31565b5b92915050565b6000806000806000806101a08789031215610d7657610d75610ac0565b5b600087013567ffffffffffffffff811115610d9457610d93610ac5565b5b610da089828a01610ccd565b965050602087013567ffffffffffffffff811115610dc157610dc0610ac5565b5b610dcd89828a01610ccd565b9550506040610dde89828a01610d1c565b9450506060610def89828a01610d1c565b9350506080610e0089828a01610d1c565b92505060a0610e1189828a01610d36565b9150509295509295509295565b610e2781610cfb565b82525050565b6000602082019050610e426000830184610e1e565b92915050565b6000806000806101608587031215610e6357610e62610ac0565b5b6000610e7187828801610b13565b9450506020610e8287828801610d1c565b9350506040610e9387828801610d1c565b9250506060610ea487828801610d36565b91505092959194509250565b60008060008060008060006101c0888a031215610ed057610ecf610ac0565b5b600088013567ffffffffffffffff811115610eee57610eed610ac5565b5b610efa8a828b01610ccd565b975050602088013567ffffffffffffffff811115610f1b57610f1a610ac5565b5b610f278a828b01610ccd565b9650506040610f388a828b01610b13565b9550506060610f498a828b01610d1c565b9450506080610f5a8a828b01610d1c565b93505060a0610f6b8a828b01610d1c565b92505060c0610f7c8a828b01610d36565b91505092959891949750929550565b6000819050919050565b610fa6610fa182610cfb565b610f8b565b82525050565b6000610fb88284610f95565b60208201915081905092915050565b610fd46101008383610c7c565b5050565b60006101a082019050610fee6000830189610e1e565b610ffb6020830188610e1e565b6110086040830187610e1e565b6110156060830186610e1e565b6110226080830185610e1e565b61102f60a0830184610fc7565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611074578082015181840152602081019050611059565b83811115611083576000848401525b50505050565b60006110948261103a565b61109e8185611045565b93506110ae818560208601611056565b6110b781610bbf565b840191505092915050565b60006080820190506110d76000830187610e1e565b81810360208301526110e98186611089565b90506110f86040830185610b8b565b818103606083015261110a8184611089565b905095945050505050565b60008160601b9050919050565b600061112d82611115565b9050919050565b600061113f82611122565b9050919050565b61115761115282610aea565b611134565b82525050565b60006111698284611146565b60148201915081905092915050565b7f55736572206861736e74206265656e2076657269666965640000000000000000600082015250565b60006111ae601883611045565b91506111b982611178565b602082019050919050565b600060208201905081810360008301526111dd816111a1565b9050919050565b600081519050919050565b600081905092915050565b6000611205826111e4565b61120f81856111ef565b935061121f818560208601611056565b80840191505092915050565b600061123782846111fa565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061128957607f821691505b60208210810361129c5761129b611242565b5b5091905056fea2646970667358221220a74092266c889e753cd73a8390383491b3705abafd1372d72afc7557c67e4ab564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80636b5f4d881161005b5780636b5f4d881461010157806389c3c2db1461011f578063a2055b281461013b578063b4ca1b1b1461015757610088565b80630961b61a1461008d57806313aad955146100bd5780632e812c98146100db578063376a2481146100f7575b600080fd5b6100a760048036038101906100a29190610b28565b610173565b6040516100b49190610b70565b60405180910390f35b6100c5610193565b6040516100d29190610b9a565b60405180910390f35b6100f560048036038101906100f09190610d58565b6101bb565b005b6100ff610328565b005b610109610334565b6040516101169190610e2d565b60405180910390f35b61013960048036038101906101349190610e48565b610345565b005b61015560048036038101906101509190610eb0565b6104c9565b005b610171600480360381019061016c9190610e48565b61075b565b005b60016020528060005260406000206000915054906101000a900460ff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6002600083815260200190815260200160002086908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610207929190610a13565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3848661026e8860405160200161025a9190610fac565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b81526004016102b296959493929190610fd8565b60006040518083038186803b1580156102ca57600080fd5b505afa1580156102de573d6000803e3d6000fd5b505050507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc746828760008860405161031894939291906110c2565b60405180910390a1505050505050565b61033260046109ef565b565b60006103406004610a05565b905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156103c9576040517f7d93d32b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061044f8860405160200161043b919061115d565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161049396959493929190610fd8565b60006040518083038186803b1580156104ab57600080fd5b505afa1580156104bf573d6000803e3d6000fd5b5050505050505050565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054c906111c4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006105db886040516020016105c79190610fac565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161061f96959493929190610fd8565b60006040518083038186803b15801561063757600080fd5b505afa15801561064b573d6000803e3d6000fd5b50505050600260008381526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061069b929190610a13565b50600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610714929190610a13565b507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc7468288878960405161074a94939291906110c2565b60405180910390a150505050505050565b60008083815260200190815260200160002060009054906101000a900460ff16156107b2576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610836576040517f6aa7da1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006108bc886040516020016108a8919061115d565b6040516020818303038152906040526109b8565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161090096959493929190610fd8565b60006040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b50505050600160008084815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60006008826040516020016109cd919061122b565b6040516020818303038152906040528051906020012060001c901c9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b828054610a1f90611271565b90600052602060002090601f016020900481019282610a415760008555610a88565b82601f10610a5a57805160ff1916838001178555610a88565b82800160010185558215610a88579182015b82811115610a87578251825591602001919060010190610a6c565b5b509050610a959190610a99565b5090565b5b80821115610ab2576000816000905550600101610a9a565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af582610aca565b9050919050565b610b0581610aea565b8114610b1057600080fd5b50565b600081359050610b2281610afc565b92915050565b600060208284031215610b3e57610b3d610ac0565b5b6000610b4c84828501610b13565b91505092915050565b60008115159050919050565b610b6a81610b55565b82525050565b6000602082019050610b856000830184610b61565b92915050565b610b9481610aea565b82525050565b6000602082019050610baf6000830184610b8b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c0882610bbf565b810181811067ffffffffffffffff82111715610c2757610c26610bd0565b5b80604052505050565b6000610c3a610ab6565b9050610c468282610bff565b919050565b600067ffffffffffffffff821115610c6657610c65610bd0565b5b610c6f82610bbf565b9050602081019050919050565b82818337600083830152505050565b6000610c9e610c9984610c4b565b610c30565b905082815260208101848484011115610cba57610cb9610bba565b5b610cc5848285610c7c565b509392505050565b600082601f830112610ce257610ce1610bb5565b5b8135610cf2848260208601610c8b565b91505092915050565b6000819050919050565b610d0e81610cfb565b8114610d1957600080fd5b50565b600081359050610d2b81610d05565b92915050565b600080fd5b600081905082602060080282011115610d5257610d51610d31565b5b92915050565b6000806000806000806101a08789031215610d7657610d75610ac0565b5b600087013567ffffffffffffffff811115610d9457610d93610ac5565b5b610da089828a01610ccd565b965050602087013567ffffffffffffffff811115610dc157610dc0610ac5565b5b610dcd89828a01610ccd565b9550506040610dde89828a01610d1c565b9450506060610def89828a01610d1c565b9350506080610e0089828a01610d1c565b92505060a0610e1189828a01610d36565b9150509295509295509295565b610e2781610cfb565b82525050565b6000602082019050610e426000830184610e1e565b92915050565b6000806000806101608587031215610e6357610e62610ac0565b5b6000610e7187828801610b13565b9450506020610e8287828801610d1c565b9350506040610e9387828801610d1c565b9250506060610ea487828801610d36565b91505092959194509250565b60008060008060008060006101c0888a031215610ed057610ecf610ac0565b5b600088013567ffffffffffffffff811115610eee57610eed610ac5565b5b610efa8a828b01610ccd565b975050602088013567ffffffffffffffff811115610f1b57610f1a610ac5565b5b610f278a828b01610ccd565b9650506040610f388a828b01610b13565b9550506060610f498a828b01610d1c565b9450506080610f5a8a828b01610d1c565b93505060a0610f6b8a828b01610d1c565b92505060c0610f7c8a828b01610d36565b91505092959891949750929550565b6000819050919050565b610fa6610fa182610cfb565b610f8b565b82525050565b6000610fb88284610f95565b60208201915081905092915050565b610fd46101008383610c7c565b5050565b60006101a082019050610fee6000830189610e1e565b610ffb6020830188610e1e565b6110086040830187610e1e565b6110156060830186610e1e565b6110226080830185610e1e565b61102f60a0830184610fc7565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611074578082015181840152602081019050611059565b83811115611083576000848401525b50505050565b60006110948261103a565b61109e8185611045565b93506110ae818560208601611056565b6110b781610bbf565b840191505092915050565b60006080820190506110d76000830187610e1e565b81810360208301526110e98186611089565b90506110f86040830185610b8b565b818103606083015261110a8184611089565b905095945050505050565b60008160601b9050919050565b600061112d82611115565b9050919050565b600061113f82611122565b9050919050565b61115761115282610aea565b611134565b82525050565b60006111698284611146565b60148201915081905092915050565b7f55736572206861736e74206265656e2076657269666965640000000000000000600082015250565b60006111ae601883611045565b91506111b982611178565b602082019050919050565b600060208201905081810360008301526111dd816111a1565b9050919050565b600081519050919050565b600081905092915050565b6000611205826111e4565b61120f81856111ef565b935061121f818560208601611056565b80840191505092915050565b600061123782846111fa565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061128957607f821691505b60208210810361129c5761129b611242565b5b5091905056fea2646970667358221220a74092266c889e753cd73a8390383491b3705abafd1372d72afc7557c67e4ab564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_actionId": "The action ID for your application",
          "_worldId": "The WorldID instance that will verify the proofs"
        }
      },
      "submitNonVerifiedUserTx(string,string,uint256,uint256,uint256,uint256[8])": {
        "details": "if store is verified"
      },
      "submitVerifiedTx(string,string,address,uint256,uint256,uint256,uint256[8])": {
        "details": "iff user and store are both verified"
      }
    },
    "stateVariables": {
      "actionId": {
        "details": "The application's action ID"
      },
      "groupId": {
        "details": "The WorldID group ID (1)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to prevent double-signaling"
      },
      "worldId": {
        "details": "The WorldID instance that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 120,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 124,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "registeredUser",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 129,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "storeTransactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 134,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "userTransactions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 137,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "groupIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)5_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/JomTx.sol:JomTx",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}