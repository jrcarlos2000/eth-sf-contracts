{
  "address": "0x63c99Cac8974e886FC9EdB97319305BfF6487EdB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_actionId",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserVerified",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "identityCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfs_uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "detail",
          "type": "string"
        }
      ],
      "name": "transactionSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getCurrGroupId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWorldIDAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementGroupIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfs_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "detail",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "storeSignal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "submitNonVerifiedUserTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfs_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "detail",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "buyer_addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "storeSignal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "submitVerifiedTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2d27663142f40430d27d35b2a667fd6fea6745d462f77f971a19500d99f4d6f",
  "receipt": {
    "to": null,
    "from": "0x41C929802517f5CE1eD0d6684B579F6E44d277b5",
    "contractAddress": "0x63c99Cac8974e886FC9EdB97319305BfF6487EdB",
    "transactionIndex": 10,
    "gasUsed": "979029",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000008000000000000000000000000000000000800000000000000800000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000100000000000000000000000200000000000000000080000000000000000000000000000000000000000004000000000000000000001000000000100800000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x7e34ec92ad47e8d140fa1b27420bbf6fdc743ecbafb5e543cddc5586b6653fa4",
    "transactionHash": "0xd2d27663142f40430d27d35b2a667fd6fea6745d462f77f971a19500d99f4d6f",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 28999095,
        "transactionHash": "0xd2d27663142f40430d27d35b2a667fd6fea6745d462f77f971a19500d99f4d6f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000041c929802517f5ce1ed0d6684b579f6e44d277b5",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000537a1eda79b0000000000000000000000000000000000000000000000000092539997de5cb360000000000000000000000000000000000000000000000000047710f331d9090a000000000000000000000000000000000000000000000000924e61f5f0b51860000000000000000000000000000000000000000000000000047c48951f80a40a",
        "logIndex": 63,
        "blockHash": "0x7e34ec92ad47e8d140fa1b27420bbf6fdc743ecbafb5e543cddc5586b6653fa4"
      }
    ],
    "blockNumber": 28999095,
    "cumulativeGasUsed": "3010201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC646e9073a8330c1a4E0002738829b6666262134",
    "wid_test_1234"
  ],
  "numDeployments": 5,
  "solcInputHash": "33c795a1f2eb7b524d8abfac933aa6c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_actionId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserVerified\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfs_uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"}],\"name\":\"transactionSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCurrGroupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldIDAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementGroupIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"storeSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"submitNonVerifiedUserTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buyer_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storeSignal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"submitVerifiedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_actionId\":\"The action ID for your application\",\"_worldId\":\"The WorldID instance that will verify the proofs\"}},\"submitNonVerifiedUserTx(string,string,uint256,uint256,uint256,uint256[8])\":{\"details\":\"if store is verified\"},\"submitVerifiedTx(string,string,address,address,uint256,uint256,uint256[8])\":{\"details\":\"iff user and store are both verified\"}},\"stateVariables\":{\"actionId\":{\"details\":\"The application's action ID\"},\"groupId\":{\"details\":\"The WorldID group ID (1)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to prevent double-signaling\"},\"worldId\":{\"details\":\"The WorldID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JomTx.sol\":\"JomTx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/JomTx.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport { ByteHasher } from './helpers/ByteHasher.sol';\\nimport { IWorldID } from './interfaces/IWorldID.sol';\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/*\\n//   @dev JomTx contract, implemented for ETH SF hackathon\\n//   @title JomTx\\n//   @author Carlos Ramos\\n//   @note we infer that everyStore using this contract has already been verified.\\n*/\\ncontract JomTx {\\n    using ByteHasher for bytes;\\n    using Counters for Counters.Counter;\\n\\n    /// @notice Thrown when attempting to reuse a nullifier\\n    error InvalidNullifier();\\n    error UserVerified();\\n\\n    event transactionSubmitted(uint256 identityCommitment, string ipfs_uri, address buyer_addr, string detail);\\n\\n    /// @dev The WorldID instance that will be used for verifying proofs\\n    IWorldID internal immutable worldId;\\n\\n    /// @dev The application's action ID\\n    uint256 internal immutable actionId;\\n\\n    /// @dev The WorldID group ID (1)\\n    uint256 internal immutable groupId = 1;\\n\\n    /// @dev Whether a nullifier hash has been used already. Used to prevent double-signaling\\n    mapping(uint256 => bool) internal nullifierHashes;\\n    mapping(address => bool) internal registeredUser;\\n\\n    // PROTOCOL VARIABLES //\\n    mapping(uint256 => string[]) internal storeTransactions;\\n    mapping(address => string[]) internal userTransactions;\\n\\n    Counters.Counter private groupIds;\\n\\n    /// @param _worldId The WorldID instance that will verify the proofs\\n    /// @param _actionId The action ID for your application\\n    constructor(IWorldID _worldId, string memory _actionId) {\\n        worldId = _worldId;\\n        actionId = abi.encodePacked(_actionId).hashToField();\\n    }\\n\\n    /// @dev if store is verified\\n    function submitNonVerifiedUserTx (\\n        string memory ipfs_uri,\\n        string memory detail,\\n        uint256 storeSignal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof \\n        ) external {\\n\\n        storeTransactions[nullifierHash].push(ipfs_uri);\\n\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(storeSignal).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n\\n        emit transactionSubmitted(nullifierHash, ipfs_uri, address(0),detail);\\n    }\\n\\n    /// @dev iff user and store are both verified\\n    function submitVerifiedTx (\\n        string memory ipfs_uri,\\n        string memory detail,\\n        address buyer_addr,\\n        address storeSignal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n        ) external {\\n\\n        require(registeredUser[buyer_addr], \\\"User hasnt been verified\\\");\\n\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(storeSignal).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n\\n        storeTransactions[nullifierHash].push(ipfs_uri);\\n        userTransactions[buyer_addr].push(ipfs_uri);\\n\\n        emit transactionSubmitted(nullifierHash, ipfs_uri, buyer_addr,detail);\\n    }\\n\\n    function verifyUser (\\n        address callerAddr,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) external {\\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n        if (registeredUser[msg.sender]) revert UserVerified();\\n\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(callerAddr).hashToField(),\\n            nullifierHash,\\n            actionId,\\n            proof\\n        );\\n\\n        nullifierHashes[nullifierHash] = true;\\n        registeredUser[msg.sender] = true;\\n    }\\n\\n    function getCurrGroupId() external view returns(uint256) {\\n        return groupIds.current();\\n    }\\n\\n    function incrementGroupIds() external {\\n        groupIds.increment();\\n    }\\n\\n\\n    function getWorldIDAddr () external view returns(address){\\n        return address(worldId);\\n    }\\n}\",\"keccak256\":\"0x5f7cff77e8d689178bcb2276fcc1e9bfc0f75b8cf7b63dc4fa25e9f69481e9e3\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x225f0627ac21d07df35533f605936035d74aa0f05a632cb8d150d3af50408cd0\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x20fc12dea0b817fb8b7bc1a851082676ed2dcb844d3673d60aa5570da3e1b62e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600160c0908152503480156200001957600080fd5b506040516200151a3803806200151a83398181016040528101906200003f919062000308565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000aa816040516020016200008a9190620003bb565b604051602081830303815290604052620000b960201b620007c21760201c565b60a0818152505050506200043a565b6000600882604051602001620000d0919062000421565b6040516020818303038152906040528051906020012060001c901c9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001338262000106565b9050919050565b6000620001478262000126565b9050919050565b62000159816200013a565b81146200016557600080fd5b50565b60008151905062000179816200014e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d48262000189565b810181811067ffffffffffffffff82111715620001f657620001f56200019a565b5b80604052505050565b60006200020b620000f2565b9050620002198282620001c9565b919050565b600067ffffffffffffffff8211156200023c576200023b6200019a565b5b620002478262000189565b9050602081019050919050565b60005b838110156200027457808201518184015260208101905062000257565b8381111562000284576000848401525b50505050565b6000620002a16200029b846200021e565b620001ff565b905082815260208101848484011115620002c057620002bf62000184565b5b620002cd84828562000254565b509392505050565b600082601f830112620002ed57620002ec6200017f565b5b8151620002ff8482602086016200028a565b91505092915050565b60008060408385031215620003225762000321620000fc565b5b6000620003328582860162000168565b925050602083015167ffffffffffffffff81111562000356576200035562000101565b5b6200036485828601620002d5565b9150509250929050565b600081519050919050565b600081905092915050565b600062000391826200036e565b6200039d818562000379565b9350620003af81856020860162000254565b80840191505092915050565b6000620003c9828462000384565b915081905092915050565b600081519050919050565b600081905092915050565b6000620003f782620003d4565b620004038185620003df565b93506200041581856020860162000254565b80840191505092915050565b60006200042f8284620003ea565b915081905092915050565b60805160a05160c05161107f6200049b600039600081816101f401528181610447015261067f01526000818161023e0152818161049101526106c9015260008181610105015281816101b70152818161040a0152610642015261107f6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806313aad9551461006757806318f14da9146100855780632e812c98146100a1578063376a2481146100bd5780636b5f4d88146100c7578063b4ca1b1b146100e5575b600080fd5b61006f610101565b60405161007c9190610901565b60405180910390f35b61009f600480360381019061009a9190610aff565b610129565b005b6100bb60048036038101906100b69190610bda565b6103bb565b005b6100c5610548565b005b6100cf610554565b6040516100dc9190610caf565b60405180910390f35b6100ff60048036038101906100fa9190610cca565b610565565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ac90610d8f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061023b886040516020016102279190610df7565b6040516020818303038152906040526107c2565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161027f96959493929190610e23565b60006040518083038186803b15801561029757600080fd5b505afa1580156102ab573d6000803e3d6000fd5b5050505060026000838152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906102fb92919061081d565b50600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061037492919061081d565b507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc746828887896040516103aa9493929190610efc565b60405180910390a150505050505050565b600260008381526020019081526020016000208690806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061040792919061081d565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061048e8860405160200161047a9190610f70565b6040516020818303038152906040526107c2565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b81526004016104d296959493929190610e23565b60006040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc74682876000886040516105389493929190610efc565b60405180910390a1505050505050565b61055260046107f9565b565b6000610560600461080f565b905090565b60008083815260200190815260200160002060009054906101000a900460ff16156105bc576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610640576040517f6aa7da1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006106c6886040516020016106b29190610df7565b6040516020818303038152906040526107c2565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161070a96959493929190610e23565b60006040518083038186803b15801561072257600080fd5b505afa158015610736573d6000803e3d6000fd5b50505050600160008084815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60006008826040516020016107d79190610fd2565b6040516020818303038152906040528051906020012060001c901c9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b82805461082990611018565b90600052602060002090601f01602090048101928261084b5760008555610892565b82601f1061086457805160ff1916838001178555610892565b82800160010185558215610892579182015b82811115610891578251825591602001919060010190610876565b5b50905061089f91906108a3565b5090565b5b808211156108bc5760008160009055506001016108a4565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108eb826108c0565b9050919050565b6108fb816108e0565b82525050565b600060208201905061091660008301846108f2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109838261093a565b810181811067ffffffffffffffff821117156109a2576109a161094b565b5b80604052505050565b60006109b561091c565b90506109c1828261097a565b919050565b600067ffffffffffffffff8211156109e1576109e061094b565b5b6109ea8261093a565b9050602081019050919050565b82818337600083830152505050565b6000610a19610a14846109c6565b6109ab565b905082815260208101848484011115610a3557610a34610935565b5b610a408482856109f7565b509392505050565b600082601f830112610a5d57610a5c610930565b5b8135610a6d848260208601610a06565b91505092915050565b610a7f816108e0565b8114610a8a57600080fd5b50565b600081359050610a9c81610a76565b92915050565b6000819050919050565b610ab581610aa2565b8114610ac057600080fd5b50565b600081359050610ad281610aac565b92915050565b600080fd5b600081905082602060080282011115610af957610af8610ad8565b5b92915050565b60008060008060008060006101c0888a031215610b1f57610b1e610926565b5b600088013567ffffffffffffffff811115610b3d57610b3c61092b565b5b610b498a828b01610a48565b975050602088013567ffffffffffffffff811115610b6a57610b6961092b565b5b610b768a828b01610a48565b9650506040610b878a828b01610a8d565b9550506060610b988a828b01610a8d565b9450506080610ba98a828b01610ac3565b93505060a0610bba8a828b01610ac3565b92505060c0610bcb8a828b01610add565b91505092959891949750929550565b6000806000806000806101a08789031215610bf857610bf7610926565b5b600087013567ffffffffffffffff811115610c1657610c1561092b565b5b610c2289828a01610a48565b965050602087013567ffffffffffffffff811115610c4357610c4261092b565b5b610c4f89828a01610a48565b9550506040610c6089828a01610ac3565b9450506060610c7189828a01610ac3565b9350506080610c8289828a01610ac3565b92505060a0610c9389828a01610add565b9150509295509295509295565b610ca981610aa2565b82525050565b6000602082019050610cc46000830184610ca0565b92915050565b6000806000806101608587031215610ce557610ce4610926565b5b6000610cf387828801610a8d565b9450506020610d0487828801610ac3565b9350506040610d1587828801610ac3565b9250506060610d2687828801610add565b91505092959194509250565b600082825260208201905092915050565b7f55736572206861736e74206265656e2076657269666965640000000000000000600082015250565b6000610d79601883610d32565b9150610d8482610d43565b602082019050919050565b60006020820190508181036000830152610da881610d6c565b9050919050565b60008160601b9050919050565b6000610dc782610daf565b9050919050565b6000610dd982610dbc565b9050919050565b610df1610dec826108e0565b610dce565b82525050565b6000610e038284610de0565b60148201915081905092915050565b610e1f61010083836109f7565b5050565b60006101a082019050610e396000830189610ca0565b610e466020830188610ca0565b610e536040830187610ca0565b610e606060830186610ca0565b610e6d6080830185610ca0565b610e7a60a0830184610e12565b979650505050505050565b600081519050919050565b60005b83811015610eae578082015181840152602081019050610e93565b83811115610ebd576000848401525b50505050565b6000610ece82610e85565b610ed88185610d32565b9350610ee8818560208601610e90565b610ef18161093a565b840191505092915050565b6000608082019050610f116000830187610ca0565b8181036020830152610f238186610ec3565b9050610f3260408301856108f2565b8181036060830152610f448184610ec3565b905095945050505050565b6000819050919050565b610f6a610f6582610aa2565b610f4f565b82525050565b6000610f7c8284610f59565b60208201915081905092915050565b600081519050919050565b600081905092915050565b6000610fac82610f8b565b610fb68185610f96565b9350610fc6818560208601610e90565b80840191505092915050565b6000610fde8284610fa1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061103057607f821691505b60208210810361104357611042610fe9565b5b5091905056fea2646970667358221220efd7389499647412dab538a310fcd052ebd9b8eecf55aa201b4b7ae2098d1f5964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806313aad9551461006757806318f14da9146100855780632e812c98146100a1578063376a2481146100bd5780636b5f4d88146100c7578063b4ca1b1b146100e5575b600080fd5b61006f610101565b60405161007c9190610901565b60405180910390f35b61009f600480360381019061009a9190610aff565b610129565b005b6100bb60048036038101906100b69190610bda565b6103bb565b005b6100c5610548565b005b6100cf610554565b6040516100dc9190610caf565b60405180910390f35b6100ff60048036038101906100fa9190610cca565b610565565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ac90610d8f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061023b886040516020016102279190610df7565b6040516020818303038152906040526107c2565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161027f96959493929190610e23565b60006040518083038186803b15801561029757600080fd5b505afa1580156102ab573d6000803e3d6000fd5b5050505060026000838152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906102fb92919061081d565b50600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061037492919061081d565b507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc746828887896040516103aa9493929190610efc565b60405180910390a150505050505050565b600260008381526020019081526020016000208690806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061040792919061081d565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061048e8860405160200161047a9190610f70565b6040516020818303038152906040526107c2565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b81526004016104d296959493929190610e23565b60006040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050507f63f2ecfeeec83f51b13b40c753e87cf599b2d368ed4e1baaf1cb2e37e1bfc74682876000886040516105389493929190610efc565b60405180910390a1505050505050565b61055260046107f9565b565b6000610560600461080f565b905090565b60008083815260200190815260200160002060009054906101000a900460ff16156105bc576040517f5d904cb200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610640576040517f6aa7da1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006106c6886040516020016106b29190610df7565b6040516020818303038152906040526107c2565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161070a96959493929190610e23565b60006040518083038186803b15801561072257600080fd5b505afa158015610736573d6000803e3d6000fd5b50505050600160008084815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60006008826040516020016107d79190610fd2565b6040516020818303038152906040528051906020012060001c901c9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b82805461082990611018565b90600052602060002090601f01602090048101928261084b5760008555610892565b82601f1061086457805160ff1916838001178555610892565b82800160010185558215610892579182015b82811115610891578251825591602001919060010190610876565b5b50905061089f91906108a3565b5090565b5b808211156108bc5760008160009055506001016108a4565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108eb826108c0565b9050919050565b6108fb816108e0565b82525050565b600060208201905061091660008301846108f2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109838261093a565b810181811067ffffffffffffffff821117156109a2576109a161094b565b5b80604052505050565b60006109b561091c565b90506109c1828261097a565b919050565b600067ffffffffffffffff8211156109e1576109e061094b565b5b6109ea8261093a565b9050602081019050919050565b82818337600083830152505050565b6000610a19610a14846109c6565b6109ab565b905082815260208101848484011115610a3557610a34610935565b5b610a408482856109f7565b509392505050565b600082601f830112610a5d57610a5c610930565b5b8135610a6d848260208601610a06565b91505092915050565b610a7f816108e0565b8114610a8a57600080fd5b50565b600081359050610a9c81610a76565b92915050565b6000819050919050565b610ab581610aa2565b8114610ac057600080fd5b50565b600081359050610ad281610aac565b92915050565b600080fd5b600081905082602060080282011115610af957610af8610ad8565b5b92915050565b60008060008060008060006101c0888a031215610b1f57610b1e610926565b5b600088013567ffffffffffffffff811115610b3d57610b3c61092b565b5b610b498a828b01610a48565b975050602088013567ffffffffffffffff811115610b6a57610b6961092b565b5b610b768a828b01610a48565b9650506040610b878a828b01610a8d565b9550506060610b988a828b01610a8d565b9450506080610ba98a828b01610ac3565b93505060a0610bba8a828b01610ac3565b92505060c0610bcb8a828b01610add565b91505092959891949750929550565b6000806000806000806101a08789031215610bf857610bf7610926565b5b600087013567ffffffffffffffff811115610c1657610c1561092b565b5b610c2289828a01610a48565b965050602087013567ffffffffffffffff811115610c4357610c4261092b565b5b610c4f89828a01610a48565b9550506040610c6089828a01610ac3565b9450506060610c7189828a01610ac3565b9350506080610c8289828a01610ac3565b92505060a0610c9389828a01610add565b9150509295509295509295565b610ca981610aa2565b82525050565b6000602082019050610cc46000830184610ca0565b92915050565b6000806000806101608587031215610ce557610ce4610926565b5b6000610cf387828801610a8d565b9450506020610d0487828801610ac3565b9350506040610d1587828801610ac3565b9250506060610d2687828801610add565b91505092959194509250565b600082825260208201905092915050565b7f55736572206861736e74206265656e2076657269666965640000000000000000600082015250565b6000610d79601883610d32565b9150610d8482610d43565b602082019050919050565b60006020820190508181036000830152610da881610d6c565b9050919050565b60008160601b9050919050565b6000610dc782610daf565b9050919050565b6000610dd982610dbc565b9050919050565b610df1610dec826108e0565b610dce565b82525050565b6000610e038284610de0565b60148201915081905092915050565b610e1f61010083836109f7565b5050565b60006101a082019050610e396000830189610ca0565b610e466020830188610ca0565b610e536040830187610ca0565b610e606060830186610ca0565b610e6d6080830185610ca0565b610e7a60a0830184610e12565b979650505050505050565b600081519050919050565b60005b83811015610eae578082015181840152602081019050610e93565b83811115610ebd576000848401525b50505050565b6000610ece82610e85565b610ed88185610d32565b9350610ee8818560208601610e90565b610ef18161093a565b840191505092915050565b6000608082019050610f116000830187610ca0565b8181036020830152610f238186610ec3565b9050610f3260408301856108f2565b8181036060830152610f448184610ec3565b905095945050505050565b6000819050919050565b610f6a610f6582610aa2565b610f4f565b82525050565b6000610f7c8284610f59565b60208201915081905092915050565b600081519050919050565b600081905092915050565b6000610fac82610f8b565b610fb68185610f96565b9350610fc6818560208601610e90565b80840191505092915050565b6000610fde8284610fa1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061103057607f821691505b60208210810361104357611042610fe9565b5b5091905056fea2646970667358221220efd7389499647412dab538a310fcd052ebd9b8eecf55aa201b4b7ae2098d1f5964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_actionId": "The action ID for your application",
          "_worldId": "The WorldID instance that will verify the proofs"
        }
      },
      "submitNonVerifiedUserTx(string,string,uint256,uint256,uint256,uint256[8])": {
        "details": "if store is verified"
      },
      "submitVerifiedTx(string,string,address,address,uint256,uint256,uint256[8])": {
        "details": "iff user and store are both verified"
      }
    },
    "stateVariables": {
      "actionId": {
        "details": "The application's action ID"
      },
      "groupId": {
        "details": "The WorldID group ID (1)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to prevent double-signaling"
      },
      "worldId": {
        "details": "The WorldID instance that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 118,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 122,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "registeredUser",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 127,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "storeTransactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 132,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "userTransactions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 135,
        "contract": "contracts/JomTx.sol:JomTx",
        "label": "groupIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)5_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/JomTx.sol:JomTx",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}